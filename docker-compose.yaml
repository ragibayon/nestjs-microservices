version: '3.8'

services:
  reservations:
    container_name: reservations
    build:
      context: ./
      dockerfile: ./apps/reservations/Dockerfile
      target: development
    command: npm run start:dev reservations
    env_file:
      - ./apps/reservations/.env
    ports: 
      - "5000:3000"
    volumes:
      - .:/usr/src/app
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - default-network

  auth:
    container_name: auth
    build:
      context: ./
      dockerfile: ./apps/auth/Dockerfile
      target: development
    command: npm run start:dev auth
    env_file:
      - ./apps/auth/.env
    ports: 
      - "5001:3001"
    volumes:
      - .:/usr/src/app
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - default-network

  mongodb:
    container_name: mongodb
    image: mongo:latest
    ports:
      - '27017:27017'
    env_file:
      - .env.db
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "mongosh --host mongodb-task-manager --quiet --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 'Health Check Successful' || echo 'Health Check Failed'",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - default-network

volumes:
  mongodb_data:

networks:
  default-network: